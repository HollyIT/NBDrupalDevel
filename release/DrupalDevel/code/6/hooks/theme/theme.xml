<?xml version="1.0" encoding="UTF-8"?>
	<item>
		<title>theme</title>
		<external>http://api.drupal.org/api/search/7/hook_theme</external>
		<group>hook</group>
		<template><![CDATA[
/**
* Implementation of hook_theme();
*/
function ${file_name}_theme($existing, $type, $theme, $path) {
   ${set_cursor}
}
]]></template>
		<help><![CDATA[<h2>hook_theme($existing, $type, $theme, $path)</h2>

<p>Register a module (or theme's) theme implementations.</p>
<p>Modules and themes implementing this return an array of arrays. The key
to each sub-array is the internal name of the hook, and the array contains
info about the hook. Each array may contain the following items:</p>
<ul>
<li>arguments: (required) An array of arguments that this theme hook uses. This
value allows the theme layer to properly utilize templates. The
array keys represent the name of the variable, and the value will be
used as the default value if not specified to the theme() function.
These arguments must be in the same order that they will be given to
the theme() function.
</li>
<li>file: The file the implementation resides in. This file will be included
prior to the theme being rendered, to make sure that the function or
preprocess function (as needed) is actually loaded; this makes it possible
to split theme functions out into separate files quite easily.
</li>
<li>path: Override the path of the file to be used. Ordinarily the module or
theme path will be used, but if the file will not be in the default path,
include it here. This path should be relative to the Drupal root
directory.
</li>
<li>template: If specified, this theme implementation is a template, and this
is the template file without an extension. Do not put .tpl.php
on this file; that extension will be added automatically by the default
rendering engine (which is PHPTemplate). If 'path', above, is specified,
the template should also be in this path.
</li>
<li>function: If specified, this will be the function name to invoke for this
implementation. If neither file nor function is specified, a default
function name will be assumed. For example, if a module registers
the 'node' theme hook, 'theme_node' will be assigned to its function.
If the chameleon theme registers the node hook, it will be assigned
'chameleon_node' as its function.
</li>
<li>pattern: A regular expression pattern to be used to allow this theme
implementation to have a dynamic name. The convention is to use __ to
differentiate the dynamic portion of the theme. For example, to allow
forums to be themed individually, the pattern might be: 'forum__'. Then,
when the forum is themed, call: theme(array('forum__'. $tid, 'forum'),
$forum).
</li>
<li>preprocess functions: A list of functions used to preprocess this data.
Ordinarily this won't be used; it's automatically filled in. By default,
for a module this will be filled in as template_preprocess_HOOK. For
a theme this will be filled in as phptemplate_preprocess and
phptemplate_preprocess_HOOK as well as themename_preprocess and
themename_preprocess_HOOK.
</li>
<li>override preprocess functions: Set to TRUE when a theme does NOT want the
standard preprocess functions to run. This can be used to give a theme
FULL control over how variables are set. For example, if a theme wants
total control over how certain variables in the page.tpl.php are set,
this can be set to true. Please keep in mind that when this is used
by a theme, that theme becomes responsible for making sure necessary
variables are set.
</li>
<li>type: (automatically derived) Where the theme hook is defined:
'module', 'theme_engine', or 'theme'.
</li>
<li>theme path: (automatically derived) The directory path of the theme or
module, so that it doesn't need to be looked up.
</li>
<li>theme paths: (automatically derived) An array of template suggestions where
.tpl.php files related to this theme hook may be found.
</li>
</ul>
<p>The following parameters are all optional.</p>

<h3>Parameters</h3>
<p><b>
$existing</b> -- 
An array of existing implementations that may be used for override
purposes. This is primarily useful for themes that may wish to examine
existing implementations to extract data (such as arguments) so that
it may properly register its own, higher priority implementations.</p>
<p><b>$type</b> -- 
What 'type' is being processed. This is primarily useful so that themes
tell if they are the actual theme being called or a parent theme.
May be one of:</p>
<ul>
<li>module: A module is being checked for theme implementations.
</li>
<li>base_theme_engine: A theme engine is being checked for a theme which is a parent of the actual theme being used.
</li>
<li>theme_engine: A theme engine is being checked for the actual theme being used.
</li>
<li>base_theme: A base theme is being checked for theme implementations.
</li>
<li>theme: The actual theme in use is being checked.
</li>
</ul>
<p><b>$theme</b> -- 
The actual name of theme that is being being checked (mostly only useful for
theme engine).</p>
<p><b>$path</b> -- 
The directory path of the theme or module, so that it doesn't need to be
looked up.</p>



]]></help>
	</item>