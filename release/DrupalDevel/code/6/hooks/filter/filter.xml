<?xml version="1.0" encoding="UTF-8"?>
	<item>
		<title>filter</title>
		<external>http://api.drupal.org/api/search/7/hook_filter</external>
		<group>hook</group>
		<template><![CDATA[
/**
* Implementation of hook_filter();
*/
function ${file_name}_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
   ${set_cursor}
}
]]></template>
		<help><![CDATA[<h2>hook_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0)</h2>

<p>Define content filters.</p>
<p>Content in Drupal is passed through all enabled filters before it is
output. This lets a module modify content to the site administrator's
liking.</p>
<p>This hook contains all that is needed for having a module provide filtering
functionality.</p>
<p>Depending on $op, different tasks are performed.</p>
<p>A module can contain as many filters as it wants. The 'list' operation tells
the filter system which filters are available. Every filter has a numerical
'delta' which is used to refer to it in every operation.</p>
<p>Filtering is a two-step process. First, the content is 'prepared' by calling
the 'prepare' operation for every filter. The purpose of 'prepare' is to
escape HTML-like structures. For example, imagine a filter which allows the
user to paste entire chunks of programming code without requiring manual
escaping of special HTML characters like @< or @&amp;. If the programming code
were left untouched, then other filters could think it was HTML and change
it. For most filters however, the prepare-step is not necessary, and they can
just return the input without changes.</p>
<p>Filters should not use the 'prepare' step for anything other than escaping,
because that would short-circuits the control the user has over the order
in which filters are applied.</p>
<p>The second step is the actual processing step. The result from the
prepare-step gets passed to all the filters again, this time with the
'process' operation. It's here that filters should perform actual changing of
the content: transforming URLs into hyperlinks, converting smileys into
images, etc.</p>
<p>An important aspect of the filtering system are 'input formats'. Every input
format is an entire filter setup: which filters to enable, in what order
and with what settings. Filters that provide settings should usually store
these settings per format.</p>
<p>If the filter's behaviour depends on an extensive list and/or external data
(e.g. a list of smileys, a list of glossary terms) then filters are allowed
to provide a separate, global configuration page rather than provide settings
per format. In that case, there should be a link from the format-specific
settings to the separate settings page.</p>
<p>For performance reasons content is only filtered once; the result is stored
in the cache table and retrieved the next time the piece of content is
displayed. If a filter's output is dynamic it can override the cache
mechanism, but obviously this feature should be used with caution: having one
'no cache' filter in a particular input format disables caching for the
entire format, not just for one filter.</p>
<p>Beware of the filter cache when developing your module: it is advised to set
your filter to 'no cache' while developing, but be sure to remove it again
if it's not needed. You can clear the cache by running the SQL query 'DELETE
FROM cache_filter';</p>

<h3>Parameters</h3>
<p><b>
$op</b> -- 
Which filtering operation to perform. Possible values:</p>
<ul>
<li>list: provide a list of available filters.
Returns an associative array of filter names with numerical keys.
These keys are used for subsequent operations and passed back through
the $delta parameter.
</li>
<li>no cache: Return true if caching should be disabled for this filter.
</li>
<li>description: Return a short description of what this filter does.
</li>
<li>prepare: Return the prepared version of the content in $text.
</li>
<li>process: Return the processed version of the content in $text.
</li>
<li>settings: Return HTML form controls for the filter's settings. These
settings are stored with variable_set() when the form is submitted.
Remember to use the $format identifier in the variable and control names
to store settings per input format (e.g. "mymodule_setting_$format").
</li>
</ul>
<p><b>$delta</b> -- 
Which of the module's filters to use (applies to every operation except
'list'). Modules that only contain one filter can ignore this parameter.</p>
<p><b>$format</b> -- 
Which input format the filter is being used in (applies to 'prepare',
'process' and 'settings').</p>
<p><b>$text</b> -- 
The content to filter (applies to 'prepare' and 'process').</p>
<p><b>$cache_id</b> -- 
The cache id of the content.</p>



]]></help>
	</item>