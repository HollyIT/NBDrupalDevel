<?xml version="1.0" encoding="UTF-8"?>
	<item>
		<title>field_widget_form</title>
		<external>http://api.drupal.org/api/search/7/hook_field_widget_form</external>
		<group>hook</group>
		<template><![CDATA[
/**
* Implements hook_field_widget_form();
*/
function ${file_name}_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
   ${set_cursor}
}
]]></template>
		<help><![CDATA[<h2>hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)</h2>

<p>Return the form for a single field widget.</p>
<p>Field widget form elements should be based on the passed-in $element, which
contains the base form element properties derived from the field
configuration.</p>
<p>Field API will set the weight, field name and delta values for each form
element. If there are multiple values for this field, the Field API will
invoke this hook as many times as needed.</p>
<p>Note that, depending on the context in which the widget is being included
(regular entity form, field configuration form, advanced search form...),
the values for $field and $instance might be different from the "official"
definitions returned by field_info_field() and field_info_instance().
Examples: mono-value widget even if the field is multi-valued, non-required
widget even if the field is 'required'...</p>
<p>Therefore, the FAPI element callbacks (such as #process, #element_validate,
#value_callback...) used by the widget cannot use the field_info_field()
or field_info_instance() functions to retrieve the $field or $instance
definitions they should operate on. The field_widget_field() and
field_widget_instance() functions should be used instead to fetch the
current working definitions from $form_state, where Field API stores them.</p>
<p>Alternatively, hook_field_widget_form() can extract the needed specific
properties from $field and $instance and set them as ad-hoc
$element['#custom'] properties, for later use by its element callbacks.</p>
<p>Other modules may alter the form element provided by this function using
hook_field_widget_form_alter().</p>

<h3>Parameters</h3>
<p><b>
$form</b> -- 
The form structure where widgets are being attached to. This might be a
full form structure, or a sub-element of a larger form.</p>
<p><b>$form_state</b> -- 
An associative array containing the current state of the form.</p>
<p><b>$field</b> -- 
The field structure.</p>
<p><b>$instance</b> -- 
The field instance.</p>
<p><b>$langcode</b> -- 
The language associated with $items.</p>
<p><b>$items</b> -- 
Array of default values for this field.</p>
<p><b>$delta</b> -- 
The order of this item in the array of subelements (0, 1, 2, etc).</p>
<p><b>$element</b> -- 
A form element array containing basic properties for the widget:</p>
<ul>
<li>#entity_type: The name of the entity the field is attached to.
</li>
<li>#bundle: The name of the field bundle the field is contained in.
</li>
<li>#field_name: The name of the field.
</li>
<li>#language: The language the field is being edited in.
</li>
<li>#field_parents: The 'parents' space for the field in the form. Most
widgets can simply overlook this property. This identifies the
location where the field values are placed within
$form_state['values'], and is used to access processing information
for the field through the field_form_get_state() and
field_form_set_state() functions.
</li>
<li>#columns: A list of field storage columns of the field.
</li>
<li>#title: The sanitized element label for the field instance, ready for
output.
</li>
<li>#description: The sanitized element description for the field instance,
ready for output.
</li>
<li>#required: A Boolean indicating whether the element value is required;
for required multiple value fields, only the first widget's values are
required.
</li>
<li>#delta: The order of this item in the array of subelements; see $delta
above.
</li>
</ul>



]]></help>
	</item>