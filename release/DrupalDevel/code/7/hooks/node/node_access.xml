<?xml version="1.0" encoding="UTF-8"?>
	<item>
		<title>node_access</title>
		<external>http://api.drupal.org/api/search/7/hook_node_access</external>
		<group>hook</group>
		<template><![CDATA[
/**
* Implements hook_node_access().
*/
function ${file_name}_node_access($node, $op, $account) {
   ${cursor}
}
]]></template>
		<help><![CDATA[<h2>hook_node_access($node, $op, $account)</h2>

<p>Control access to a node.</p>
<p>Modules may implement this hook if they want to have a say in whether or not
a given user has access to perform a given operation on a node.</p>
<p>The administrative account (user ID #1) always passes any access check,
so this hook is not called in that case. Users with the "bypass node access"
permission may always view and edit content through the administrative
interface.</p>
<p>Note that not all modules will want to influence access on all
node types. If your module does not want to actively grant or
block access, return NODE_ACCESS_IGNORE or simply return nothing.
Blindly returning FALSE will break other node access modules.</p>
<p><a href="http://api.drupal.org/api/group/node_access/7">More on the node access system</a></p>

<h3>Parameters</h3>
<p><b>
$node</b> -- 
The node on which the operation is to be performed, or, if it does
not yet exist, the type of node to be created.</p>
<p><b>$op</b> -- 
The operation to be performed. Possible values:</p>
<ul>
<li>"create"
</li>
<li>"delete"
</li>
<li>"update"
</li>
<li>"view"
</li>
</ul>
<p><b>$account</b> -- 
A user object representing the user for whom the operation is to be
performed.</p>



]]></help>
	</item>