<?xml version="1.0" encoding="UTF-8"?>
	<item>
		<title>forms</title>
		<external>http://api.drupal.org/api/search/7/hook_forms</external>
		<group>hook</group>
		<template><![CDATA[
/**
* Implements hook_forms().
*/
function ${file_name}_forms($form_id, $args) {
   ${cursor}
}
]]></template>
		<help><![CDATA[<h2>hook_forms($form_id, $args)</h2>

<p>Map form_ids to form builder functions.</p>
<p>By default, when drupal_get_form() is called, the system will look for a
function with the same name as the form ID, and use that function to build
the form. This hook allows you to override that behavior in two ways.</p>
<p>First, you can use this hook to tell the form system to use a different
function to build certain forms in your module; this is often used to define
a form "factory" function that is used to build several similar forms. In
this case, your hook implementation will likely ignore all of the input
arguments. See node_forms() for an example of this.</p>
<p>Second, you could use this hook to define how to build a form with a
dynamically-generated form ID. In this case, you would need to verify that
the $form_id input matched your module's format for dynamically-generated
form IDs, and if so, act appropriately.</p>

<h3>Parameters</h3>
<p><b>
$form_id</b> -- 
The unique string identifying the desired form.</p>
<p><b>$args</b> -- 
An array containing the original arguments provided to drupal_get_form()
or drupal_form_submit(). These are always passed to the form builder and
do not have to be specified manually in 'callback arguments'.</p>



]]></help>
	</item>